using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Tooling.Connector;
using System;
using System.IO;

namespace DynamicsEntityGenerator
{
    class Program
    {
        static void Main(string[] args)
        {
            string connectionString = string.Format("AuthType=ClientSecret;Url={0};ClientId={1};ClientSecret={2}",
                Secrets.ServiceUrl,
                Secrets.ClientId,
                Secrets.Secret);

            IOrganizationService oServiceProxy = null;
            try
            {

                //Create the Dynamics 365 Connection:
                CrmServiceClient oMSCRMConn = new Microsoft.Xrm.Tooling.Connector.CrmServiceClient(connectionString);

                //Create the IOrganizationService:
                oServiceProxy = (IOrganizationService)oMSCRMConn.OrganizationWebProxyClient != null ? (IOrganizationService)oMSCRMConn.OrganizationWebProxyClient : (IOrganizationService)oMSCRMConn.OrganizationServiceProxy;
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine("Failed to initialize connection! {0}", ex);
            }


            if (oServiceProxy != null)
            {
                //Get the current user ID:
                Guid userid = ((WhoAmIResponse)oServiceProxy.Execute(new WhoAmIRequest())).UserId;

                if (userid != Guid.Empty)
                {
                    Console.WriteLine("Connection Successful!");
                }

                AutoGeneratorClient client = new AutoGeneratorClient(oServiceProxy);
                
                string dataPath = "..\\..\\Autogenerated";

                string[] entities =
                {
                    "account",
                    "contact",
                    "systemuser",
                    "task",
                };

                client.GenerateClasses(dataPath, entities);

                client.QueryDatabaseToCSV<Account>(Path.Combine(dataPath, "Accounts.csv"));
                client.QueryDatabaseToCSV<Contact>(Path.Combine(dataPath, "Contact.csv"));
                client.QueryDatabaseToCSV<Systemuser>(Path.Combine(dataPath, "User.csv"));
                client.QueryDatabaseToCSV<Task>(Path.Combine(dataPath, "Task.csv"));
            }
            else
            {
                Console.WriteLine("Connection failed...");
            }
        }
    }
}
