using CsvHelper;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Xrm.Tooling.Connector;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Text;

namespace DynamicsEntityGenerator
{
    class Program
    {
        static void SaveCSV<T>(string outputPath, List<T> results)
        {
            if (results != null)
            {
                #region Accounts

                using (FileStream fsWrite = File.Open(outputPath, FileMode.Create, FileAccess.Write, FileShare.ReadWrite))
                {
                    using (StreamWriter writer = new StreamWriter(fsWrite, Encoding.UTF8))
                    {
                        using (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture))
                        {
                            csv.WriteHeader<Account>();
                            csv.NextRecord();
                            foreach (var record in results)
                            {
                                csv.WriteRecord(record);
                                csv.NextRecord();
                            }
                            writer.Flush();
                        }
                    }
                }

                #endregion
            }
        }

        static void Main(string[] args)
        {
            string connection = string.Format("AuthType=ClientSecret;Url={0};ClientId={1};ClientSecret={2}",
                Secrets.ServiceUrl,
                Secrets.ClientId,
                Secrets.Secret);

            //Create the Dynamics 365 Connection:
            CrmServiceClient oMSCRMConn = new Microsoft.Xrm.Tooling.Connector.CrmServiceClient(connection);

            //Create the IOrganizationService:
            IOrganizationService oServiceProxy = (IOrganizationService)oMSCRMConn.OrganizationWebProxyClient != null ? (IOrganizationService)oMSCRMConn.OrganizationWebProxyClient : (IOrganizationService)oMSCRMConn.OrganizationServiceProxy;


            if (oServiceProxy != null)
            {
                //Get the current user ID:
                Guid userid = ((WhoAmIResponse)oServiceProxy.Execute(new WhoAmIRequest())).UserId;

                if (userid != Guid.Empty)
                {
                    Console.WriteLine("Connection Successful!");
                }

                string[] entities =
                {
                    "account",
                    "contact",
                    "systemuser",
                    "task",
                };

                AutoGeneratorClient client = new AutoGeneratorClient(oServiceProxy);
                
                string outputPath = "../../Autogenerated";

                client.GenerateClasses(outputPath, entities);

                QueryExpression query;

                // accounts
                query = client.NewQueryExpression<Account>();
                query.ColumnSet = new Microsoft.Xrm.Sdk.Query.ColumnSet(true);
                //query.TopCount = 1;
                List<Account> accounts = client.RetrieveMultiple<Account>(query);
                SaveCSV(Path.Combine(outputPath, "Accounts.csv"), accounts);

                // contact
                query = client.NewQueryExpression<Contact>();
                query.ColumnSet = new Microsoft.Xrm.Sdk.Query.ColumnSet(true);
                //query.TopCount = 1;
                List<Contact> contacts = client.RetrieveMultiple<Contact>(query);
                SaveCSV(Path.Combine(outputPath, "Contact.csv"), contacts);

                // Systemuser
                query = client.NewQueryExpression<Systemuser>();
                query.ColumnSet = new Microsoft.Xrm.Sdk.Query.ColumnSet(true);
                //query.TopCount = 1;
                List<Systemuser> users = client.RetrieveMultiple<Systemuser>(query);
                SaveCSV(Path.Combine(outputPath, "User.csv"), users);

                // Task
                query = client.NewQueryExpression<Task>();
                query.ColumnSet = new Microsoft.Xrm.Sdk.Query.ColumnSet(true);
                //query.TopCount = 1;
                List<Task> tasks = client.RetrieveMultiple<Task>(query);
                SaveCSV(Path.Combine(outputPath, "Task.csv"), tasks);

            }
            else
            {
                Console.WriteLine("Connection failed...");
            }
        }
    }
}
