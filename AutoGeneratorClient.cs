using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using System;
using System.Collections.Generic;
using System.Reflection;

namespace DynamicsEntityGenerator
{
    public class AutoGeneratorClient
    {
        private IOrganizationService _mServiceProxy;

        public AutoGeneratorClient(IOrganizationService oServiceProxy)
        {
            _mServiceProxy = oServiceProxy;
        }

        public QueryExpression NewQueryExpression<T>() where T : IAutogeneratedClass
        {
            foreach (object attribute in typeof(T).GetCustomAttributes(false))
            {
                if (attribute is TableNameAttribute)
                {
                    return new QueryExpression((attribute as TableNameAttribute).Name);
                }

            }
            return null;
        }

        public List<T> RetrieveMultiple<T>(QueryBase query) where T : new()
        {
            PropertyInfo[] properties = typeof(T).GetProperties();
            Dictionary<string, PropertyInfo> dictProp = new Dictionary<string, PropertyInfo>();
            foreach (PropertyInfo p in properties)
            {
                dictProp[p.Name] = p;
            }
            List<T> list = new List<T>();
            var results = _mServiceProxy.RetrieveMultiple(query);
            if (results != null && results.Entities != null)
            {
                foreach (var record in results.Entities)
                {
                    T item = new T();
                    ///*
                    foreach (var ac in record.Attributes)
                    {
                        if (dictProp.ContainsKey(ac.Key))
                        {
                            PropertyInfo p = dictProp[ac.Key];
                            p.SetValue(item, ac.Value.ToString());
                        }
                        else
                        {
                            Console.Error.WriteLine("Field Not Mapped! Key={0} Value={1}", ac.Key, ac.Value);
                        }
                    }
                    //*/
                    foreach (var fvc in record.FormattedValues)
                    {
                        if (dictProp.ContainsKey(fvc.Key))
                        {
                            PropertyInfo p = dictProp[fvc.Key];
                            p.SetValue(item, fvc.Value);
                        }
                        else
                        {
                            Console.Error.WriteLine("Field Not Mapped! Key={0} Value={1}", fvc.Key, fvc.Value);
                        }
                    }
                    list.Add(item);
                }
            }
            return list;
        }
    }
}
