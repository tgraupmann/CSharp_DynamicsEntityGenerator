using CsvHelper;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Text;

namespace DynamicsEntityGenerator
{
    public class AutoGeneratorClient
    {
        private IOrganizationService _mServiceProxy;

        public AutoGeneratorClient(IOrganizationService oServiceProxy)
        {
            _mServiceProxy = oServiceProxy;
        }

        public QueryExpression NewQueryExpression<T>() where T : IAutogeneratedClass
        {
            foreach (object attribute in typeof(T).GetCustomAttributes(false))
            {
                if (attribute is TableNameAttribute)
                {
                    return new QueryExpression((attribute as TableNameAttribute).Name);
                }

            }
            return null;
        }

        public List<T> RetrieveMultiple<T>(QueryBase query) where T : IAutogeneratedClass, new()
        {
            PropertyInfo[] properties = typeof(T).GetProperties();
            Dictionary<string, PropertyInfo> dictProp = new Dictionary<string, PropertyInfo>();
            foreach (PropertyInfo p in properties)
            {
                dictProp[p.Name] = p;
            }
            List<T> list = new List<T>();
            var results = _mServiceProxy.RetrieveMultiple(query);
            if (results != null && results.Entities != null)
            {
                foreach (var record in results.Entities)
                {
                    T item = new T();
                    ///*
                    foreach (var ac in record.Attributes)
                    {
                        string attribute = string.Format("attribute_{0}", ac.Key);
                        if (dictProp.ContainsKey(attribute))
                        {
                            PropertyInfo p = dictProp[attribute];
                            p.SetValue(item, ac.Value);
                        }
                        else
                        {
                            Console.Error.WriteLine("Field Not Mapped! Key={0} Value={1}", ac.Key, ac.Value);
                        }
                    }
                    //*/
                    foreach (var fv in record.FormattedValues)
                    {
                        string formattedValue = string.Format("formatted_value_{0}", fv.Key);
                        if (dictProp.ContainsKey(formattedValue))
                        {
                            PropertyInfo p = dictProp[formattedValue];
                            p.SetValue(item, fv.Value);
                        }
                        else
                        {
                            Console.Error.WriteLine("Field Not Mapped! Key={0} Value={1}", fv.Key, fv.Value);
                        }
                    }
                    list.Add(item);
                }
            }
            return list;
        }

        void GenerateEntity(string outputPath, string entity, SortedList<string, Type> attributes, SortedList<string, Type> formattedValues)
        {
            if (string.IsNullOrEmpty(entity) || entity.Length < 2)
            {
                return;
            }
            string ucEntity = string.Format("{0}{1}", entity.Substring(0, 1).ToUpper(), entity.Substring(1));

            string path = Path.Combine(outputPath, string.Format("{0}.cs", ucEntity));
            using (FileStream fs = File.Open(path, FileMode.Create, FileAccess.Write, FileShare.ReadWrite))
            {
                using (StreamWriter sw = new StreamWriter(fs, Encoding.UTF8))
                {
                    sw.WriteLine("[DynamicsEntityGenerator.TableName(\"{0}\")]", entity);
                    sw.WriteLine("public class {0} : DynamicsEntityGenerator.IAutogeneratedClass", ucEntity);
                    sw.WriteLine("{0}", "{");
                    foreach (KeyValuePair<string, Type> attribute in attributes)
                    {
                        sw.WriteLine("\t[CsvHelper.Configuration.Attributes.Name(\"attribute_{0}\")]", attribute.Key);
                        sw.WriteLine("\tpublic {0} attribute_{1} {2}", attribute.Value, attribute.Key, "{ get; set; }");
                        sw.WriteLine();
                    }
                    foreach (KeyValuePair<string, Type> formattedValue in formattedValues)
                    {
                        sw.WriteLine("\t[CsvHelper.Configuration.Attributes.Name(\"formatted_value_{0}\")]", formattedValue.Key);
                        sw.WriteLine("\tpublic string formatted_value_{0} {1}", formattedValue.Key, "{ get; set; }");
                        sw.WriteLine();
                    }
                    sw.WriteLine("{0}", "}");
                    sw.Flush();
                }
            }
        }

        public void GenerateClasses(string outputPath, string[] entities)
        {
            foreach (string entity in entities)
            {
                var query = new QueryExpression(entity);
                query.ColumnSet = new Microsoft.Xrm.Sdk.Query.ColumnSet(true);
                //query.TopCount = 1;
                var results = _mServiceProxy.RetrieveMultiple(query);
                if (results != null)
                {
                    SortedList<string, Type> attributes = new SortedList<string, Type>();
                    SortedList<string, Type> formattedValues = new SortedList<string, Type>();
                    foreach (Entity result in results.Entities)
                    {
                        //var myJSON = JsonConvert.SerializeObject(result);

                        int index = 0;
                        foreach (KeyValuePair<string, object> kvp in result.Attributes)
                        {
                            if (!attributes.ContainsKey(kvp.Key))
                            {
                                attributes.Add(kvp.Key, kvp.Value.GetType());
                                //Console.WriteLine("Key={0} Value={1} Type={2}", kvp.Key, kvp.Value, kvp.Value.GetType());
                            }
                            ++index;
                        }

                        foreach (var fvc in result.FormattedValues)
                        {
                            if (!formattedValues.ContainsKey(fvc.Key))
                            {
                                formattedValues.Add(fvc.Key, fvc.Value.GetType());
                                //Console.WriteLine("Key={0} Value={1} Type={2}", fvc.Key, fvc.Value, fvc.Value.GetType());
                            }
                        }
                    }
                    GenerateEntity(outputPath, entity, attributes, formattedValues);
                }
            }
        }

        public void SaveCSV<T>(string outputPath, List<T> results) where T : IAutogeneratedClass
        {
            if (results != null)
            {
                using (FileStream fsWrite = File.Open(outputPath, FileMode.Create, FileAccess.Write, FileShare.ReadWrite))
                {
                    using (StreamWriter writer = new StreamWriter(fsWrite, Encoding.UTF8))
                    {
                        using (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture))
                        {
                            csv.WriteHeader<T>();
                            csv.NextRecord();
                            foreach (var record in results)
                            {
                                csv.WriteRecord(record);
                                csv.NextRecord();
                            }
                            writer.Flush();
                            Console.WriteLine("Saved {0} records to {1}", typeof(T), outputPath);
                        }
                    }
                }
            }
        }

        public void QueryDatabaseToCSV<T>(string pathCSV) where T : IAutogeneratedClass, new()
        {
            QueryExpression query = NewQueryExpression<T>();
            query.ColumnSet = new ColumnSet(true);
            //query.TopCount = 1;
            List<T> records = RetrieveMultiple<T>(query);
            SaveCSV(pathCSV, records);
        }

        public List<T> LoadCSV<T>(string inputPath) where T : IAutogeneratedClass
        {
            List<T> list = new List<T>();
            using (var reader = new StreamReader(inputPath, Encoding.UTF8))
            {
                using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
                {
                    IEnumerable<T> tempT = csv.GetRecords<T>();
                    foreach (T record in tempT)
                    {
                        list.Add(record);
                    }
                }
            }
            return list;
        }
    }
}
